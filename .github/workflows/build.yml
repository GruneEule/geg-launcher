name: Build and Release

on:
  push:
    branches:
      - "**" # Build on push to any branch
    tags:
      - "v*" # Release on v* tags
  workflow_dispatch: {} # Allow manual dispatch

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: aarch64-apple-darwin
            output_path: ./src-tauri/target/aarch64-apple-darwin/release/bundle
            asset_name_base: NoRiskClient-MacOS-arm64
          - platform: "macos-latest"
            target: x86_64-apple-darwin
            output_path: ./src-tauri/target/x86_64-apple-darwin/release/bundle
            asset_name_base: NoRiskClient-MacOS-x86_64
          - platform: "ubuntu-22.04"
            target: ""
            output_path: ./src-tauri/target/release/bundle
            asset_name_base: NoRiskClient-Linux
          - platform: "windows-latest"
            target: ""
            output_path: ./src-tauri/target/release/bundle
            asset_name_base: NoRiskClient-Windows-setup

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "yarn"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Debug Rust info
        run: |
          rustc --version
          cargo --version
          echo "Target: ${{ matrix.target }}"

      - name: Debug project structure
        run: |
          ls -la
          if [ -d "src-tauri" ]; then
            ls -la src-tauri/
          fi
        shell: bash

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Build Tauri App (No Signing)
        run: |
          yarn tauri build --target ${{ matrix.target != '' && matrix.target || '' }}
        env:
          # Deaktiviere Signing komplett
          TAURI_SKIP_SIGNING: "true"
        shell: bash

      # --- Umbenennen und Artefakte vorbereiten ---
      - name: Rename Linux Artifacts
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "--- Listing content BEFORE rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          ls -R "${{ matrix.output_path }}" || true
          echo "-----------------------------------"

          APP_BASE_NAME="GEG Launcher"
          APPIMAGE_DIR=${{ matrix.output_path }}/appimage
          DEB_DIR=${{ matrix.output_path }}/deb

          echo "Listing content of $APPIMAGE_DIR and $DEB_DIR"
          ls -R "$APPIMAGE_DIR" || true
          ls -R "$DEB_DIR" || true

          # Verschiebe und benenne AppImage um
          mv "$APPIMAGE_DIR"/*.AppImage "$APPIMAGE_DIR"/${{ matrix.asset_name_base }}.AppImage

          # Verschiebe und benenne Deb Paket um
          mv "$DEB_DIR"/*.deb "$APPIMAGE_DIR"/${{ matrix.asset_name_base }}.deb

          echo "Final content of $APPIMAGE_DIR after moves"
          ls -R "$APPIMAGE_DIR" || true

          echo "--- Listing content AFTER rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          ls -R "${{ matrix.output_path }}" || true
          echo "-----------------------------------"
        shell: bash

      - name: Rename Windows Artifacts
        if: matrix.platform == 'windows-latest'
        run: |
          echo "--- Listing content BEFORE rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          Get-ChildItem -Path "${{ matrix.output_path }}" -Recurse -ErrorAction SilentlyContinue
          echo "-----------------------------------"

          $ARTIFACT_DIR = "${{ matrix.output_path }}\nsis"
          echo "Listing content of $ARTIFACT_DIR"
          Get-ChildItem -Path $ARTIFACT_DIR -Recurse -ErrorAction SilentlyContinue
          # Finde die Originalnamen (angenommen nur eine .exe)
          $ExeFile = Get-ChildItem -Path $ARTIFACT_DIR -Filter *.exe -ErrorAction SilentlyContinue

          if ($ExeFile) {
            # Benenne .exe um
            Move-Item -Path $ExeFile.FullName -Destination "$ARTIFACT_DIR\${{ matrix.asset_name_base }}.exe"
          } else {
            Write-Warning "No .exe file found in $ARTIFACT_DIR"
          }

          echo "Final content of $ARTIFACT_DIR after move"
          Get-ChildItem -Path $ARTIFACT_DIR -Recurse -ErrorAction SilentlyContinue

          echo "--- Listing content AFTER rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          Get-ChildItem -Path "${{ matrix.output_path }}" -Recurse -ErrorAction SilentlyContinue
          echo "-----------------------------------"
        shell: pwsh

      - name: Rename macOS Artifacts
        if: matrix.platform == 'macos-latest'
        run: |
          echo "--- Listing content BEFORE rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          ls -R "${{ matrix.output_path }}" || true 
          echo "-----------------------------------"

          APP_BASE_NAME="GEG Launcher"
          ARTIFACT_DIR_DMG=${{ matrix.output_path }}/dmg
          ARTIFACT_DIR_APP=${{ matrix.output_path }}/macos
          RENAMED_DIR="$ARTIFACT_DIR_APP/renamed"

          echo "Listing content of $ARTIFACT_DIR_DMG and $ARTIFACT_DIR_APP"
          ls -R "$ARTIFACT_DIR_DMG" || true
          ls -R "$ARTIFACT_DIR_APP" || true
          mkdir -p "$RENAMED_DIR"

          # Verschiebe DMG
          mv "$ARTIFACT_DIR_DMG"/*.dmg "$RENAMED_DIR"/${{ matrix.asset_name_base }}.dmg

          # Verschiebe App Tarball
          mv "$ARTIFACT_DIR_APP/${APP_BASE_NAME}.app.tar.gz" "$RENAMED_DIR"/${{ matrix.asset_name_base }}.app.tar.gz

          echo "Final content of $RENAMED_DIR after move"
          ls -R "$RENAMED_DIR" || true

          echo "--- Listing content AFTER rename ---"
          echo "Output path: ${{ matrix.output_path }}"
          ls -R "${{ matrix.output_path }}" || true
          echo "-----------------------------------"
        shell: bash

      # --- Artefakte hochladen ---
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'ubuntu-22.04'
        with:
          name: artifact-${{ matrix.platform }}
          path: ${{ matrix.output_path }}/appimage/${{ matrix.asset_name_base }}.*
          if-no-files-found: error

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'windows-latest'
        with:
          name: artifact-${{ matrix.platform }}
          path: ${{ matrix.output_path }}\nsis\${{ matrix.asset_name_base }}.*
          if-no-files-found: error

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'macos-latest'
        with:
          name: artifact-${{ matrix.platform }}-${{ matrix.target }}
          path: ${{ matrix.output_path }}/macos/renamed/${{ matrix.asset_name_base }}.*
          if-no-files-found: error

  # --- JOB 2: Create Release ---
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for tag ${{ github.ref_name }}
            See assets below.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          files: artifacts/**/*
